// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm.io/gen/examples/dal/model"
)

func newProjectuser(db *gorm.DB, opts ...gen.DOOption) projectuser {
	_projectuser := projectuser{}

	_projectuser.projectuserDo.UseDB(db, opts...)
	_projectuser.projectuserDo.UseModel(&model.Projectuser{})

	tableName := _projectuser.projectuserDo.TableName()
	_projectuser.ALL = field.NewAsterisk(tableName)
	_projectuser.ID = field.NewInt32(tableName, "id")
	_projectuser.Project = field.NewInt32(tableName, "project")
	_projectuser.Employee = field.NewInt32(tableName, "employee")
	_projectuser.Isgranted = field.NewBool(tableName, "isgranted")

	_projectuser.fillFieldMap()

	return _projectuser
}

type projectuser struct {
	projectuserDo projectuserDo

	ALL       field.Asterisk
	ID        field.Int32
	Project   field.Int32
	Employee  field.Int32
	Isgranted field.Bool

	fieldMap map[string]field.Expr
}

func (p projectuser) Table(newTableName string) *projectuser {
	p.projectuserDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p projectuser) As(alias string) *projectuser {
	p.projectuserDo.DO = *(p.projectuserDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *projectuser) updateTableName(table string) *projectuser {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt32(table, "id")
	p.Project = field.NewInt32(table, "project")
	p.Employee = field.NewInt32(table, "employee")
	p.Isgranted = field.NewBool(table, "isgranted")

	p.fillFieldMap()

	return p
}

func (p *projectuser) WithContext(ctx context.Context) *projectuserDo {
	return p.projectuserDo.WithContext(ctx)
}

func (p projectuser) TableName() string { return p.projectuserDo.TableName() }

func (p projectuser) Alias() string { return p.projectuserDo.Alias() }

func (p *projectuser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *projectuser) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 4)
	p.fieldMap["id"] = p.ID
	p.fieldMap["project"] = p.Project
	p.fieldMap["employee"] = p.Employee
	p.fieldMap["isgranted"] = p.Isgranted
}

func (p projectuser) clone(db *gorm.DB) projectuser {
	p.projectuserDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p projectuser) replaceDB(db *gorm.DB) projectuser {
	p.projectuserDo.ReplaceDB(db)
	return p
}

type projectuserDo struct{ gen.DO }

func (p projectuserDo) Debug() *projectuserDo {
	return p.withDO(p.DO.Debug())
}

func (p projectuserDo) WithContext(ctx context.Context) *projectuserDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p projectuserDo) ReadDB() *projectuserDo {
	return p.Clauses(dbresolver.Read)
}

func (p projectuserDo) WriteDB() *projectuserDo {
	return p.Clauses(dbresolver.Write)
}

func (p projectuserDo) Session(config *gorm.Session) *projectuserDo {
	return p.withDO(p.DO.Session(config))
}

func (p projectuserDo) Clauses(conds ...clause.Expression) *projectuserDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p projectuserDo) Returning(value interface{}, columns ...string) *projectuserDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p projectuserDo) Not(conds ...gen.Condition) *projectuserDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p projectuserDo) Or(conds ...gen.Condition) *projectuserDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p projectuserDo) Select(conds ...field.Expr) *projectuserDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p projectuserDo) Where(conds ...gen.Condition) *projectuserDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p projectuserDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *projectuserDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p projectuserDo) Order(conds ...field.Expr) *projectuserDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p projectuserDo) Distinct(cols ...field.Expr) *projectuserDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p projectuserDo) Omit(cols ...field.Expr) *projectuserDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p projectuserDo) Join(table schema.Tabler, on ...field.Expr) *projectuserDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p projectuserDo) LeftJoin(table schema.Tabler, on ...field.Expr) *projectuserDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p projectuserDo) RightJoin(table schema.Tabler, on ...field.Expr) *projectuserDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p projectuserDo) Group(cols ...field.Expr) *projectuserDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p projectuserDo) Having(conds ...gen.Condition) *projectuserDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p projectuserDo) Limit(limit int) *projectuserDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p projectuserDo) Offset(offset int) *projectuserDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p projectuserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *projectuserDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p projectuserDo) Unscoped() *projectuserDo {
	return p.withDO(p.DO.Unscoped())
}

func (p projectuserDo) Create(values ...*model.Projectuser) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p projectuserDo) CreateInBatches(values []*model.Projectuser, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p projectuserDo) Save(values ...*model.Projectuser) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p projectuserDo) First() (*model.Projectuser, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Projectuser), nil
	}
}

func (p projectuserDo) Take() (*model.Projectuser, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Projectuser), nil
	}
}

func (p projectuserDo) Last() (*model.Projectuser, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Projectuser), nil
	}
}

func (p projectuserDo) Find() ([]*model.Projectuser, error) {
	result, err := p.DO.Find()
	return result.([]*model.Projectuser), err
}

func (p projectuserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Projectuser, err error) {
	buf := make([]*model.Projectuser, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p projectuserDo) FindInBatches(result *[]*model.Projectuser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p projectuserDo) Attrs(attrs ...field.AssignExpr) *projectuserDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p projectuserDo) Assign(attrs ...field.AssignExpr) *projectuserDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p projectuserDo) Joins(fields ...field.RelationField) *projectuserDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p projectuserDo) Preload(fields ...field.RelationField) *projectuserDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p projectuserDo) FirstOrInit() (*model.Projectuser, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Projectuser), nil
	}
}

func (p projectuserDo) FirstOrCreate() (*model.Projectuser, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Projectuser), nil
	}
}

func (p projectuserDo) FindByPage(offset int, limit int) (result []*model.Projectuser, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p projectuserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p projectuserDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p projectuserDo) Delete(models ...*model.Projectuser) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *projectuserDo) withDO(do gen.Dao) *projectuserDo {
	p.DO = *do.(*gen.DO)
	return p
}
