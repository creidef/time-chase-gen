// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm.io/gen/examples/dal/model"
)

func newExpense(db *gorm.DB, opts ...gen.DOOption) expense {
	_expense := expense{}

	_expense.expenseDo.UseDB(db, opts...)
	_expense.expenseDo.UseModel(&model.Expense{})

	tableName := _expense.expenseDo.TableName()
	_expense.ALL = field.NewAsterisk(tableName)
	_expense.ID = field.NewInt32(tableName, "id")
	_expense.Date = field.NewTime(tableName, "date")
	_expense.Comment = field.NewString(tableName, "comment")
	_expense.Cost = field.NewFloat64(tableName, "cost")
	_expense.Amount = field.NewInt32(tableName, "amount")
	_expense.Project = field.NewInt32(tableName, "project")

	_expense.fillFieldMap()

	return _expense
}

type expense struct {
	expenseDo expenseDo

	ALL     field.Asterisk
	ID      field.Int32
	Date    field.Time
	Comment field.String
	Cost    field.Float64
	Amount  field.Int32
	Project field.Int32

	fieldMap map[string]field.Expr
}

func (e expense) Table(newTableName string) *expense {
	e.expenseDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e expense) As(alias string) *expense {
	e.expenseDo.DO = *(e.expenseDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *expense) updateTableName(table string) *expense {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.Date = field.NewTime(table, "date")
	e.Comment = field.NewString(table, "comment")
	e.Cost = field.NewFloat64(table, "cost")
	e.Amount = field.NewInt32(table, "amount")
	e.Project = field.NewInt32(table, "project")

	e.fillFieldMap()

	return e
}

func (e *expense) WithContext(ctx context.Context) *expenseDo { return e.expenseDo.WithContext(ctx) }

func (e expense) TableName() string { return e.expenseDo.TableName() }

func (e expense) Alias() string { return e.expenseDo.Alias() }

func (e *expense) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *expense) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 6)
	e.fieldMap["id"] = e.ID
	e.fieldMap["date"] = e.Date
	e.fieldMap["comment"] = e.Comment
	e.fieldMap["cost"] = e.Cost
	e.fieldMap["amount"] = e.Amount
	e.fieldMap["project"] = e.Project
}

func (e expense) clone(db *gorm.DB) expense {
	e.expenseDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e expense) replaceDB(db *gorm.DB) expense {
	e.expenseDo.ReplaceDB(db)
	return e
}

type expenseDo struct{ gen.DO }

func (e expenseDo) Debug() *expenseDo {
	return e.withDO(e.DO.Debug())
}

func (e expenseDo) WithContext(ctx context.Context) *expenseDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e expenseDo) ReadDB() *expenseDo {
	return e.Clauses(dbresolver.Read)
}

func (e expenseDo) WriteDB() *expenseDo {
	return e.Clauses(dbresolver.Write)
}

func (e expenseDo) Session(config *gorm.Session) *expenseDo {
	return e.withDO(e.DO.Session(config))
}

func (e expenseDo) Clauses(conds ...clause.Expression) *expenseDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e expenseDo) Returning(value interface{}, columns ...string) *expenseDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e expenseDo) Not(conds ...gen.Condition) *expenseDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e expenseDo) Or(conds ...gen.Condition) *expenseDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e expenseDo) Select(conds ...field.Expr) *expenseDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e expenseDo) Where(conds ...gen.Condition) *expenseDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e expenseDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *expenseDo {
	return e.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (e expenseDo) Order(conds ...field.Expr) *expenseDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e expenseDo) Distinct(cols ...field.Expr) *expenseDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e expenseDo) Omit(cols ...field.Expr) *expenseDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e expenseDo) Join(table schema.Tabler, on ...field.Expr) *expenseDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e expenseDo) LeftJoin(table schema.Tabler, on ...field.Expr) *expenseDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e expenseDo) RightJoin(table schema.Tabler, on ...field.Expr) *expenseDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e expenseDo) Group(cols ...field.Expr) *expenseDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e expenseDo) Having(conds ...gen.Condition) *expenseDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e expenseDo) Limit(limit int) *expenseDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e expenseDo) Offset(offset int) *expenseDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e expenseDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *expenseDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e expenseDo) Unscoped() *expenseDo {
	return e.withDO(e.DO.Unscoped())
}

func (e expenseDo) Create(values ...*model.Expense) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e expenseDo) CreateInBatches(values []*model.Expense, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e expenseDo) Save(values ...*model.Expense) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e expenseDo) First() (*model.Expense, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Expense), nil
	}
}

func (e expenseDo) Take() (*model.Expense, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Expense), nil
	}
}

func (e expenseDo) Last() (*model.Expense, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Expense), nil
	}
}

func (e expenseDo) Find() ([]*model.Expense, error) {
	result, err := e.DO.Find()
	return result.([]*model.Expense), err
}

func (e expenseDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Expense, err error) {
	buf := make([]*model.Expense, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e expenseDo) FindInBatches(result *[]*model.Expense, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e expenseDo) Attrs(attrs ...field.AssignExpr) *expenseDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e expenseDo) Assign(attrs ...field.AssignExpr) *expenseDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e expenseDo) Joins(fields ...field.RelationField) *expenseDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e expenseDo) Preload(fields ...field.RelationField) *expenseDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e expenseDo) FirstOrInit() (*model.Expense, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Expense), nil
	}
}

func (e expenseDo) FirstOrCreate() (*model.Expense, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Expense), nil
	}
}

func (e expenseDo) FindByPage(offset int, limit int) (result []*model.Expense, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e expenseDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e expenseDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e expenseDo) Delete(models ...*model.Expense) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *expenseDo) withDO(do gen.Dao) *expenseDo {
	e.DO = *do.(*gen.DO)
	return e
}
