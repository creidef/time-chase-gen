// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm.io/gen/examples/dal/model"
)

func newBankholiday(db *gorm.DB, opts ...gen.DOOption) bankholiday {
	_bankholiday := bankholiday{}

	_bankholiday.bankholidayDo.UseDB(db, opts...)
	_bankholiday.bankholidayDo.UseModel(&model.Bankholiday{})

	tableName := _bankholiday.bankholidayDo.TableName()
	_bankholiday.ALL = field.NewAsterisk(tableName)
	_bankholiday.ID = field.NewInt32(tableName, "id")
	_bankholiday.Name = field.NewString(tableName, "name")
	_bankholiday.Date = field.NewTime(tableName, "date")
	_bankholiday.Year = field.NewInt32(tableName, "year")

	_bankholiday.fillFieldMap()

	return _bankholiday
}

type bankholiday struct {
	bankholidayDo bankholidayDo

	ALL  field.Asterisk
	ID   field.Int32
	Name field.String
	Date field.Time
	Year field.Int32

	fieldMap map[string]field.Expr
}

func (b bankholiday) Table(newTableName string) *bankholiday {
	b.bankholidayDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b bankholiday) As(alias string) *bankholiday {
	b.bankholidayDo.DO = *(b.bankholidayDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *bankholiday) updateTableName(table string) *bankholiday {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewInt32(table, "id")
	b.Name = field.NewString(table, "name")
	b.Date = field.NewTime(table, "date")
	b.Year = field.NewInt32(table, "year")

	b.fillFieldMap()

	return b
}

func (b *bankholiday) WithContext(ctx context.Context) *bankholidayDo {
	return b.bankholidayDo.WithContext(ctx)
}

func (b bankholiday) TableName() string { return b.bankholidayDo.TableName() }

func (b bankholiday) Alias() string { return b.bankholidayDo.Alias() }

func (b *bankholiday) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *bankholiday) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 4)
	b.fieldMap["id"] = b.ID
	b.fieldMap["name"] = b.Name
	b.fieldMap["date"] = b.Date
	b.fieldMap["year"] = b.Year
}

func (b bankholiday) clone(db *gorm.DB) bankholiday {
	b.bankholidayDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b bankholiday) replaceDB(db *gorm.DB) bankholiday {
	b.bankholidayDo.ReplaceDB(db)
	return b
}

type bankholidayDo struct{ gen.DO }

func (b bankholidayDo) Debug() *bankholidayDo {
	return b.withDO(b.DO.Debug())
}

func (b bankholidayDo) WithContext(ctx context.Context) *bankholidayDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b bankholidayDo) ReadDB() *bankholidayDo {
	return b.Clauses(dbresolver.Read)
}

func (b bankholidayDo) WriteDB() *bankholidayDo {
	return b.Clauses(dbresolver.Write)
}

func (b bankholidayDo) Session(config *gorm.Session) *bankholidayDo {
	return b.withDO(b.DO.Session(config))
}

func (b bankholidayDo) Clauses(conds ...clause.Expression) *bankholidayDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b bankholidayDo) Returning(value interface{}, columns ...string) *bankholidayDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b bankholidayDo) Not(conds ...gen.Condition) *bankholidayDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b bankholidayDo) Or(conds ...gen.Condition) *bankholidayDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b bankholidayDo) Select(conds ...field.Expr) *bankholidayDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b bankholidayDo) Where(conds ...gen.Condition) *bankholidayDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b bankholidayDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *bankholidayDo {
	return b.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (b bankholidayDo) Order(conds ...field.Expr) *bankholidayDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b bankholidayDo) Distinct(cols ...field.Expr) *bankholidayDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b bankholidayDo) Omit(cols ...field.Expr) *bankholidayDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b bankholidayDo) Join(table schema.Tabler, on ...field.Expr) *bankholidayDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b bankholidayDo) LeftJoin(table schema.Tabler, on ...field.Expr) *bankholidayDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b bankholidayDo) RightJoin(table schema.Tabler, on ...field.Expr) *bankholidayDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b bankholidayDo) Group(cols ...field.Expr) *bankholidayDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b bankholidayDo) Having(conds ...gen.Condition) *bankholidayDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b bankholidayDo) Limit(limit int) *bankholidayDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b bankholidayDo) Offset(offset int) *bankholidayDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b bankholidayDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *bankholidayDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b bankholidayDo) Unscoped() *bankholidayDo {
	return b.withDO(b.DO.Unscoped())
}

func (b bankholidayDo) Create(values ...*model.Bankholiday) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b bankholidayDo) CreateInBatches(values []*model.Bankholiday, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b bankholidayDo) Save(values ...*model.Bankholiday) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b bankholidayDo) First() (*model.Bankholiday, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Bankholiday), nil
	}
}

func (b bankholidayDo) Take() (*model.Bankholiday, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Bankholiday), nil
	}
}

func (b bankholidayDo) Last() (*model.Bankholiday, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Bankholiday), nil
	}
}

func (b bankholidayDo) Find() ([]*model.Bankholiday, error) {
	result, err := b.DO.Find()
	return result.([]*model.Bankholiday), err
}

func (b bankholidayDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Bankholiday, err error) {
	buf := make([]*model.Bankholiday, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b bankholidayDo) FindInBatches(result *[]*model.Bankholiday, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b bankholidayDo) Attrs(attrs ...field.AssignExpr) *bankholidayDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b bankholidayDo) Assign(attrs ...field.AssignExpr) *bankholidayDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b bankholidayDo) Joins(fields ...field.RelationField) *bankholidayDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b bankholidayDo) Preload(fields ...field.RelationField) *bankholidayDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b bankholidayDo) FirstOrInit() (*model.Bankholiday, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Bankholiday), nil
	}
}

func (b bankholidayDo) FirstOrCreate() (*model.Bankholiday, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Bankholiday), nil
	}
}

func (b bankholidayDo) FindByPage(offset int, limit int) (result []*model.Bankholiday, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b bankholidayDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b bankholidayDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b bankholidayDo) Delete(models ...*model.Bankholiday) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *bankholidayDo) withDO(do gen.Dao) *bankholidayDo {
	b.DO = *do.(*gen.DO)
	return b
}
