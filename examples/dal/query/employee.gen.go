// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm.io/gen/examples/dal/model"
)

func newEmployee(db *gorm.DB, opts ...gen.DOOption) employee {
	_employee := employee{}

	_employee.employeeDo.UseDB(db, opts...)
	_employee.employeeDo.UseModel(&model.Employee{})

	tableName := _employee.employeeDo.TableName()
	_employee.ALL = field.NewAsterisk(tableName)
	_employee.ID = field.NewInt32(tableName, "id")
	_employee.Firstname = field.NewString(tableName, "firstname")
	_employee.Lastname = field.NewString(tableName, "lastname")
	_employee.Birthday = field.NewTime(tableName, "birthday")
	_employee.Workload = field.NewInt32(tableName, "workload")
	_employee.Workhours = field.NewInt32(tableName, "workhours")
	_employee.Holidays = field.NewInt32(tableName, "holidays")
	_employee.Holidaysused = field.NewInt32(tableName, "holidaysused")
	_employee.StartedAt = field.NewTime(tableName, "started_at")
	_employee.CreatedAt = field.NewTime(tableName, "created_at")
	_employee.Isactive = field.NewBool(tableName, "isactive")
	_employee.Nationality = field.NewInt32(tableName, "nationality")
	_employee.Ahvnr = field.NewInt32(tableName, "ahvnr")

	_employee.fillFieldMap()

	return _employee
}

type employee struct {
	employeeDo employeeDo

	ALL          field.Asterisk
	ID           field.Int32
	Firstname    field.String
	Lastname     field.String
	Birthday     field.Time
	Workload     field.Int32
	Workhours    field.Int32
	Holidays     field.Int32
	Holidaysused field.Int32
	StartedAt    field.Time
	CreatedAt    field.Time
	Isactive     field.Bool
	Nationality  field.Int32
	Ahvnr        field.Int32

	fieldMap map[string]field.Expr
}

func (e employee) Table(newTableName string) *employee {
	e.employeeDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e employee) As(alias string) *employee {
	e.employeeDo.DO = *(e.employeeDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *employee) updateTableName(table string) *employee {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.Firstname = field.NewString(table, "firstname")
	e.Lastname = field.NewString(table, "lastname")
	e.Birthday = field.NewTime(table, "birthday")
	e.Workload = field.NewInt32(table, "workload")
	e.Workhours = field.NewInt32(table, "workhours")
	e.Holidays = field.NewInt32(table, "holidays")
	e.Holidaysused = field.NewInt32(table, "holidaysused")
	e.StartedAt = field.NewTime(table, "started_at")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.Isactive = field.NewBool(table, "isactive")
	e.Nationality = field.NewInt32(table, "nationality")
	e.Ahvnr = field.NewInt32(table, "ahvnr")

	e.fillFieldMap()

	return e
}

func (e *employee) WithContext(ctx context.Context) *employeeDo { return e.employeeDo.WithContext(ctx) }

func (e employee) TableName() string { return e.employeeDo.TableName() }

func (e employee) Alias() string { return e.employeeDo.Alias() }

func (e *employee) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *employee) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 13)
	e.fieldMap["id"] = e.ID
	e.fieldMap["firstname"] = e.Firstname
	e.fieldMap["lastname"] = e.Lastname
	e.fieldMap["birthday"] = e.Birthday
	e.fieldMap["workload"] = e.Workload
	e.fieldMap["workhours"] = e.Workhours
	e.fieldMap["holidays"] = e.Holidays
	e.fieldMap["holidaysused"] = e.Holidaysused
	e.fieldMap["started_at"] = e.StartedAt
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["isactive"] = e.Isactive
	e.fieldMap["nationality"] = e.Nationality
	e.fieldMap["ahvnr"] = e.Ahvnr
}

func (e employee) clone(db *gorm.DB) employee {
	e.employeeDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e employee) replaceDB(db *gorm.DB) employee {
	e.employeeDo.ReplaceDB(db)
	return e
}

type employeeDo struct{ gen.DO }

func (e employeeDo) Debug() *employeeDo {
	return e.withDO(e.DO.Debug())
}

func (e employeeDo) WithContext(ctx context.Context) *employeeDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e employeeDo) ReadDB() *employeeDo {
	return e.Clauses(dbresolver.Read)
}

func (e employeeDo) WriteDB() *employeeDo {
	return e.Clauses(dbresolver.Write)
}

func (e employeeDo) Session(config *gorm.Session) *employeeDo {
	return e.withDO(e.DO.Session(config))
}

func (e employeeDo) Clauses(conds ...clause.Expression) *employeeDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e employeeDo) Returning(value interface{}, columns ...string) *employeeDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e employeeDo) Not(conds ...gen.Condition) *employeeDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e employeeDo) Or(conds ...gen.Condition) *employeeDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e employeeDo) Select(conds ...field.Expr) *employeeDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e employeeDo) Where(conds ...gen.Condition) *employeeDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e employeeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *employeeDo {
	return e.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (e employeeDo) Order(conds ...field.Expr) *employeeDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e employeeDo) Distinct(cols ...field.Expr) *employeeDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e employeeDo) Omit(cols ...field.Expr) *employeeDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e employeeDo) Join(table schema.Tabler, on ...field.Expr) *employeeDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e employeeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *employeeDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e employeeDo) RightJoin(table schema.Tabler, on ...field.Expr) *employeeDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e employeeDo) Group(cols ...field.Expr) *employeeDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e employeeDo) Having(conds ...gen.Condition) *employeeDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e employeeDo) Limit(limit int) *employeeDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e employeeDo) Offset(offset int) *employeeDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e employeeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *employeeDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e employeeDo) Unscoped() *employeeDo {
	return e.withDO(e.DO.Unscoped())
}

func (e employeeDo) Create(values ...*model.Employee) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e employeeDo) CreateInBatches(values []*model.Employee, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e employeeDo) Save(values ...*model.Employee) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e employeeDo) First() (*model.Employee, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Employee), nil
	}
}

func (e employeeDo) Take() (*model.Employee, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Employee), nil
	}
}

func (e employeeDo) Last() (*model.Employee, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Employee), nil
	}
}

func (e employeeDo) Find() ([]*model.Employee, error) {
	result, err := e.DO.Find()
	return result.([]*model.Employee), err
}

func (e employeeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Employee, err error) {
	buf := make([]*model.Employee, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e employeeDo) FindInBatches(result *[]*model.Employee, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e employeeDo) Attrs(attrs ...field.AssignExpr) *employeeDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e employeeDo) Assign(attrs ...field.AssignExpr) *employeeDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e employeeDo) Joins(fields ...field.RelationField) *employeeDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e employeeDo) Preload(fields ...field.RelationField) *employeeDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e employeeDo) FirstOrInit() (*model.Employee, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Employee), nil
	}
}

func (e employeeDo) FirstOrCreate() (*model.Employee, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Employee), nil
	}
}

func (e employeeDo) FindByPage(offset int, limit int) (result []*model.Employee, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e employeeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e employeeDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e employeeDo) Delete(models ...*model.Employee) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *employeeDo) withDO(do gen.Dao) *employeeDo {
	e.DO = *do.(*gen.DO)
	return e
}
